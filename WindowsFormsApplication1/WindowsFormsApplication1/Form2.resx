<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Для настройки радиостанции необходимо:
1. Надеть и подогнать шлемофон.
2. Переключатель режима работы поставить в положение СИМПЛЕКС.
3. Ручку ШУМЫ повернуть против хода часовой стрелки до упора.
4. Переключатель КОНТРОЛЬ НАПРЯЖЕНИЙ поставить в положение РАБОТА 1.
5. Включить выключатель ШКАЛА.
6. Включить выключатель ПИТАНИЕ.
7. Ручку ГРОМКОСТЬ повернуть по ходу часовой стрелки до упора (максимальная громкость).
8. Переключатель ФИКСИР. ЧАСТОТЫ ПЛАВНЫЙ ПОДДИАПАЗОН поставить в положение 1 и дождаться прекращения вращения ручек УСТАНОВКА ЧАСТОТЫ и НАСТРОЙКА АНТЕННЫ.
9. Открыть крышку, закрывающую доступ к фиксаторам частот, и расфиксировать фиксатор частоты 1, повернув его специальным ключом против хода часовой стрелки на 90°.
10. Ручкой УСТАНОВКА ЧАСТОТЫ установить по шкале значение первой фиксированной частоты. Зафиксировать частоту, совместив шлиц в головке первого фиксатора с красным кругом на барабане. При фиксации нужно следить за тем, чтобы не сбилась установленная на шкале частота.

11. Первым (вторым) переключателем ПОДДИАПАЗОН I-II установить поддиапазон первой (второй) фиксированной частоты.
12. Включить радиостанцию на передачу, поставив тангенту нагрудного переключателя в положение ПРД.
13. Расфиксировать ручку НАСТРОЙКА АНТЕННЫ, повернув ее фиксатор (красная ручка) на 3-4 оборота против хода часовой стрелки, и, вращая ручку НАСТРОЙКА АНТЕННЫ, добиться наибольшего показания стрелочного прибора-индикатора. При вращении ручки НАСТРОЙКА АНТЕННЫ получается несколько максимумов отклонения стрелки индикатора. При оптимальной настройке световой индикатор будет иметь наибольшую яркость освещения.
14. Зафиксировать ручку НАСТРОЙКА АНТЕННЫ, завернув ее фиксатор по ходу часовой стрелки до упора.
15. Проверить модуляцию. Счет «раз, два, три» должен хорошо прослушиваться в телефонах шлемофона.
16. Перевести радиостанцию на прием, отпустив тангенту нагрудного переключателя.
17. Для настройки на остальные фиксированные частоты повторить операции 8-16 для фиксированных частот 2, 3, 4.
18. После настройки на четыре фиксированные частоты закрыть крышку на передней панели, выключить лампу освещения шкалы и положить ключ на место.
</value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>